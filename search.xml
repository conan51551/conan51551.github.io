<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记录</title>
    <url>/2021/12/07/%E7%BD%97%E6%9B%BC%E7%BD%97%E5%85%B0/</url>
    <content><![CDATA[<p><strong>成功只是一时的<br>失败却是主旋律<br>但是如何面对失败<br>却把人分成了不同的样子<br>有的人会被失败击垮<br>有的人能够不断的爬起来继续向前<br>我想真正的成熟应该并不是追求完美<br>而是直面自己的缺憾<br>这才是生活的本质<br>罗曼罗兰说过<br>”这个世界上只有一种真正的英雄主义，那就是认清生活的真相，并且任然热爱它“</strong><br>            <div style="text-align:right;"><em><strong>— 贺炜2014年世界杯送别西班牙时的解说</strong></em></p>
</div>


]]></content>
      <tags>
        <tag>Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>微前端嵌入项目的流程</title>
    <url>/2024/11/15/micro-app/</url>
    <content><![CDATA[<h3 id="代账项目引入-microapp-流程"><a href="#代账项目引入-microapp-流程" class="headerlink" title="代账项目引入 microapp 流程"></a>代账项目引入 microapp 流程</h3><span id="more"></span>

<p>在原 iframe 的地方使用 microapp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import microApp from &#x27;@micro-zoe/micro-app&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;micro-app</span><br><span class="line">    // @ts-ignore</span><br><span class="line">    name=&#123;&#x27;salary-microApp&#x27;&#125;</span><br><span class="line">    r-show=&#123;xcUrlNew&#125;</span><br><span class="line">    url=&#123;xcUrlNew&#125;</span><br><span class="line">    style=&#123;&#123; height: &#x27;100%&#x27; &#125;&#125; &gt;&lt;/micro-app&gt;</span><br></pre></td></tr></table></figure>

<p>将需要开启的薪酬类型加到数组中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1： 正常工资</span><br><span class="line">export const supportMicroAppIds = [1]</span><br></pre></td></tr></table></figure>

<p>然后页面就会出现<code>&lt;micro-app&gt;</code>标签,挂在的就是原<code>iframe</code>的页面</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><code>microapp</code> 的 url 不能是跨域的，如果不在一个域名需要解决跨域资源请求的问题</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>页面打开后，大概率是白屏报错的状态,下面就是需要解决的问题</p>
<h4 id="1-window-YZF-GlobalData-是空的"><a href="#1-window-YZF-GlobalData-是空的" class="headerlink" title="1. window.YZF.GlobalData 是空的"></a>1. <code>window.YZF.GlobalData</code> 是空的</h4><p>原因是在<code>common.min.js</code>脚本中，有一段代码<br><img src="/images/clip-img2.png" width="200" style="margin:0"/><br>将<code>window.YZF.GlobalData</code> 设置为空了，然后在另一个地方<br><img src="/images/clip-img1.png" width="800" style="margin:0"/><br>将<code>window.YZF.GlobalData</code> 设置为 <code>window.parent.YZF.GlobalData || &#123;&#125;</code></p>
<p>现在因为已经没有<code>window.parent</code>了，所以<code>window.YZF.GlobalData</code> 就为空了</p>
<p>现在<code>common.min.js</code>脚本的平级加了<code>common.microapp.min.js</code>，将<code>html</code>文件中的<code>common.min.js</code>替换为<code>common.microapp.min.js</code>就可以</p>
<h4 id="2-页面样式错乱"><a href="#2-页面样式错乱" class="headerlink" title="2. 页面样式错乱"></a>2. 页面样式错乱</h4><p>造成这个问题的原因可能有如下四个：</p>
<ul>
<li><p><code>$(&#39;body&#39;)</code>或者<code>$(&#39;document&#39;)</code>找不到，所以需要修改<code>$(&#39;body&#39;)</code>或<code>$(&#39;document&#39;)</code>为<code>$(&#39;micro-app-body&#39;)</code></p>
</li>
<li><p>所有<code>absolute</code>的元素可能定位不对，需要修改为<code>fixed</code></p>
</li>
<li><p>页面中引用的<code>fintax-web</code>中的组件使用了<code>tailwind-css</code>，在<code>microapp</code>中无法生效，需要依据情况手动修改</p>
</li>
<li><p>页面元素的主题色不生效，需要自己在<code>css</code>文件中设置（因为微前端为了样式隔离，会在<code>css</code>外侧包一层<code>micro-app-body</code>）</p>
</li>
</ul>
<h4 id="3-页面中的-layer-ui-修改"><a href="#3-页面中的-layer-ui-修改" class="headerlink" title="3. 页面中的 layer ui 修改"></a>3. 页面中的 layer ui 修改</h4><p><code>layer ui</code>引用变更</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;%=PUBLIC_URL%&gt;/static/public/layer/microApp/layer/layer.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 下面两个css前后顺序有关系 --&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&lt;%=PUBLIC_URL%&gt;/static/public/layer/microApp/layer/skin/layer.css&quot; /&gt;</span><br><span class="line">&lt;link</span><br><span class="line">  rel=&quot;stylesheet&quot;</span><br><span class="line">  type=&quot;text/css&quot;</span><br><span class="line">  href=&quot;&lt;%=PUBLIC_URL%&gt;/static/public/layer/microApp/layer/skin/yzf/layer.css&quot;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-在原生页面中通过plugin使用了react组件，但是组件不生效的问题"><a href="#4-在原生页面中通过plugin使用了react组件，但是组件不生效的问题" class="headerlink" title="4.在原生页面中通过plugin使用了react组件，但是组件不生效的问题"></a>4.在原生页面中通过<code>plugin</code>使用了<code>react</code>组件，但是组件不生效的问题</h4><p>需要在<code>page-plugins.js</code>文件中，调用新的<code>createOnePage</code>方法匹配对应的插件。<br>同时在新拷贝出来的插件中，需要将<code>window</code>或者一些全局变量按照显示的调用重新编写一份</p>
<h3 id="5-接口方面报错或者报接口找不到"><a href="#5-接口方面报错或者报接口找不到" class="headerlink" title="5.接口方面报错或者报接口找不到"></a>5.接口方面报错或者报接口找不到</h3><p>需要引入修改过的<code>old-api.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;&lt;%=PUBLIC_URL%&gt;/static/public/yzf/js/old-api.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这是后有可能会不生效，是因为<code>utils.microApp.min.js</code>在<code>old-api</code>之前引入的，所以需要将<code>old-api</code>放在<code>utils.microApp.min.js</code>之前引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;%=PUBLIC_URL%&gt;/static/public/yzf/js/utils.microApp.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-使用了微前端会导致-url-中引入之前-iframe-的参数"><a href="#6-使用了微前端会导致-url-中引入之前-iframe-的参数" class="headerlink" title="6.使用了微前端会导致 url 中引入之前 iframe 的参数"></a>6.使用了微前端会导致 url 中引入之前 iframe 的参数</h3><p>为了是<code>url</code>干净，现将<code>url</code>的参数放到<code>sesstionStorage</code>中，在页面中获取<br>首先改写<code>fintax-web</code>中<code>salary</code>目录下的的<code>getIframeUrl</code>方法，将参数放到<code>sessionStorage</code>中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 判断是否是支持微应用</span><br><span class="line">  if (supportMicroAppIds.includes(kXclxid) &amp;&amp; model_lastest[kXclxid].iframeUrl) &#123;</span><br><span class="line">    const _key = model_lastest[kXclxid].iframeUrl.split(&#x27;?&#x27;)[0]</span><br><span class="line">    sessionStorage.setItem(</span><br><span class="line">      _key,</span><br><span class="line">      JSON.stringify(&#123;</span><br><span class="line">        xctjid,</span><br><span class="line">        xclxid: kXclxid,</span><br><span class="line">        xcssq,</span><br><span class="line">        xcssqq,</span><br><span class="line">        xcssqz,</span><br><span class="line">        pzzt,</span><br><span class="line">        qyid: qyId,</span><br><span class="line">        kjnd,</span><br><span class="line">        kjqj,</span><br><span class="line">        ztdm,</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>然后在<code>sub-accounts</code>中，在对应的页面js改写<code>getUrlParam</code>方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;(function ($, $w) &#123;</span><br><span class="line">  //name</span><br><span class="line">  $w.Utils = $w.Utils || &#123;&#125;</span><br><span class="line"></span><br><span class="line">  //url</span><br><span class="line">  $w.Utils.url = $w.Utils.url || &#123;&#125;</span><br><span class="line">  $.extend(true, $w.Utils.url, &#123;</span><br><span class="line">    getUrlParam: function () &#123;</span><br><span class="line">      const param = sessionStorage.getItem(&#x27;/salary_lastest.html&#x27;)</span><br><span class="line">      return param ? JSON.parse(param) : &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)(jQuery, window)</span><br></pre></td></tr></table></figure>

<p>这样就要注意，文件对应的js就要在<code>utils.microApp.min.js</code>之后引入</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><p>微前端改造主要的问题是原来是用<code>iframe</code>引入的页面，相当于是一个浏览器去单独请求的页面，所以很多执行的机制是完整，通过项目的形式去走的流程，改成微前端后，页面是在一个沙箱中，数据和样式都是隔离的，很多子项目的流程不走了，所以造成了很多问题，所以需要手动去解决这些问题。</p>
</li>
<li><p><code>micro-app</code>没有使用主流的<code>single-spa</code>，而是用了<code>webComponent</code>的思想,不需要子应用修改渲染逻辑并且暴露出来(<em><code>single-spa</code>的核心就是定义了一套协议，主要就包括主应用的配置信息和子应用的生命周期函数。</em>)</p>
</li>
<li><img src="/images/性能对比.png" width="800" style="margin:0"/>
大致对比一下，在3秒内打开的正常工资，微前端会快200ms左右</li>
</ul>
<h4 id="ps：-微前端的路由也有相应的改动，目前并没有遇到相应的需求，如果有需要，可以参考microapp的官方文档"><a href="#ps：-微前端的路由也有相应的改动，目前并没有遇到相应的需求，如果有需要，可以参考microapp的官方文档" class="headerlink" title="ps： 微前端的路由也有相应的改动，目前并没有遇到相应的需求，如果有需要，可以参考microapp的官方文档"></a>ps： 微前端的路由也有相应的改动，目前并没有遇到相应的需求，如果有需要，可以参考<code>microapp</code>的官方文档</h4>]]></content>
  </entry>
  <entry>
    <title>用纯CSS实现滚动阴影</title>
    <url>/2023/03/10/BackgroundAttachment/</url>
    <content><![CDATA[<p>首先，介绍一下 <code>background-attachment</code>，如果指定了 <code>background-image</code> ，那么 <code>background-attachment</code> 决定背景是在视口中固定的还是随着包含它的区块滚动的。</p>
<p><code>background-attachment: local</code>，这个就是和我们日常使用中的用法是一致的，可滚动容器的背景图案随着容器进行滚动<br><code>background-attachment: scroll</code>，这个是今天的主角，它表明背景相对于元素本身固定， 而不是随着它的内容滚动</p>
<span id="more"></span>

<p>滚动阴影的难点在于，初始没有滚动的时候是没有阴影展现的，只有当开始滚动，阴影才会出现。</p>
<p>所以这里，我们借助 <code>background-attachment: srcoll</code> 和 <code>background-attachment: local</code> 两个属性，在滚动初始的时候，利用两层背景叠加在一起隐藏阴影背景，真正滚动的时候，将叠加的部分移走，只漏出阴影部分即可。</p>
<p>html 代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul class=&quot;g-final&quot;&gt;</span><br><span class="line">    &lt;li&gt;AAAAAAAA AAAA&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;BBBBBBBB CCCC&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;DDDDDDDD DDDD&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;AAAAAAAA AAAA&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;BBBBBBBB CCCC&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;DDDDDDDD DDDD&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;AAAAAAAA AAAA&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;BBBBBBBB CCCC&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;DDDDDDDD DDDD&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;AAAAAAAA AAAA&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;BBBBBBBB CCCC&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;DDDDDDDD DDDD&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>css 代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.g-final &#123;</span><br><span class="line">    background:</span><br><span class="line">        linear-gradient(#fff, transparent 100%),</span><br><span class="line">        linear-gradient(rgba(0, 0, 0, .5), transparent 100%);</span><br><span class="line">    background-size: 100% 50px, 100% 10px;</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment: local, scroll;</span><br><span class="line">    overflow: scroll;</span><br><span class="line">    height: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Chromecookie鉴权</title>
    <url>/2022/08/16/Chromecookie%E9%89%B4%E6%9D%83/</url>
    <content><![CDATA[<p>请听题！把一个项目放入另一个系统里分几步？<br>答：分3步。</p>
<p>1、 把项目打包<br>2、 把项目对公地址填入要引入的系统<br>3、 构建系统</p>
<span id="more"></span>

<p>在之前我也是这么认为的，然而在实际操作的时候遇到问题了，因为这个项目是通过<code>url</code>中的<code>query</code>来获取鉴权信息，然后存入<code>cookie</code>中的，这个项目和系统又是不同的域名，然而在<code>Chrome</code>某个版本开始就不支持跨域存储<code>cookie</code>，所以就把cookie放到接口的<code>reponse</code>中去<code>set-cookie</code>。</p>
<p>一切看上去就是这么美好，然后真的运行起来后，还是没成功。接下来就开始了踩坑的旅途。</p>
<p>初次尝试，将<code>set-cookie</code>设置为<code>read-only:true</code>，失败<br>再次尝试，设置<code>same-site</code>，失败<br>最后发现必须是在<code>https</code>下才能生效</p>
<p>以此记录这趟坑爹之旅</p>
]]></content>
  </entry>
  <entry>
    <title>git 一些实用操作</title>
    <url>/2022/04/26/GitOperate/</url>
    <content><![CDATA[<p>日常开发中 git 是经常用到的，下面记录一写实际会用到的 git 常用操作</p>
<span id="more"></span>

<h2 id="回退-master-提交"><a href="#回退-master-提交" class="headerlink" title="回退 master 提交"></a>回退 master 提交</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master // 切换至master</span><br><span class="line">git checkout -b master-backup  // 备份master</span><br><span class="line">git push origin master-backup // 将备份推送到origin</span><br><span class="line">git checkout master // 切换至master</span><br><span class="line">git reset [HEAD^1 | 052e($commit id)]   // reset上一次或指定提交记录</span><br><span class="line">git checkout . // 丢弃本地的修改</span><br><span class="line">git push --delete origin master // 将origin master删除</span><br><span class="line">git push origin master // 将本地master推到origin</span><br></pre></td></tr></table></figure>

<h2 id="查询一个月内某个人的代码提交行数"><a href="#查询一个月内某个人的代码提交行数" class="headerlink" title="查询一个月内某个人的代码提交行数"></a>查询一个月内某个人的代码提交行数</h2><p>输出的样式类似 <code>added lines: 1659, removed lines: 450, total lines: 1209</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --author=&quot;name&quot; --pretty=tformat: --numstat --since=&#x27;1 month ago&#x27;  | awk &#x27;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc &#125;&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="查询提交前五的人"><a href="#查询提交前五的人" class="headerlink" title="查询提交前五的人"></a>查询提交前五的人</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --pretty=&#x27;%aN&#x27; | sort | uniq -c | sort -k1 -n -r | head -n 5</span><br></pre></td></tr></table></figure>

<h2 id="合并多条-commit"><a href="#合并多条-commit" class="headerlink" title="合并多条 commit"></a>合并多条 commit</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~3  // 合并最近3条commit</span><br></pre></td></tr></table></figure>

<h2 id="merge-的时候合并合并多条-commit-为-1-条"><a href="#merge-的时候合并合并多条-commit-为-1-条" class="headerlink" title="merge 的时候合并合并多条 commit 为 1 条"></a>merge 的时候合并合并多条 commit 为 1 条</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge --squash &#123;commit id&#125;</span><br></pre></td></tr></table></figure>


<h2 id="根据时间查看git代码的提交量-下面是3个月的提交量"><a href="#根据时间查看git代码的提交量-下面是3个月的提交量" class="headerlink" title="根据时间查看git代码的提交量(下面是3个月的提交量)"></a>根据时间查看git代码的提交量(下面是3个月的提交量)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --since=&quot;3 month ago&quot; --pretty=&quot;%aN&quot; --numstat | awk &#x27;</span><br><span class="line">BEGIN &#123;</span><br><span class="line">    # 初始化变量</span><br><span class="line">    current_author = &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    if (NF == 1) &#123;</span><br><span class="line">        # 这一行是作者名</span><br><span class="line">        current_author = $1;</span><br><span class="line">    &#125; else if (NF &gt;= 3 &amp;&amp; $1 ~ /^[0-9]+$/) &#123;</span><br><span class="line">        # 这一行是数字统计（添加行数、删除行数、文件名）</span><br><span class="line">        authors_add[current_author] += $1;</span><br><span class="line">        authors_subs[current_author] += $2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">END &#123;</span><br><span class="line">    printf &quot;开发者代码贡献统计:\n&quot;;</span><br><span class="line">    for (author in authors_add) &#123;</span><br><span class="line">        net = authors_add[author] - authors_subs[author];</span><br><span class="line">        printf &quot;  %s: +%s -%s (净增%s)\n&quot;, author, authors_add[author], authors_subs[author], net;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>前端小技巧</title>
    <url>/2022/04/25/littleTip/</url>
    <content><![CDATA[<p>记录一些看到的小技巧(虽然可能没用~)，</p>
<span id="more"></span>

<h2 id="indexOf-按位操作简化"><a href="#indexOf-按位操作简化" class="headerlink" title="indexOf 按位操作简化"></a>indexOf 按位操作简化</h2><p>避免写很多的&gt;-1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//longhand</span></span><br><span class="line"><span class="keyword">if</span> (arr.indexOf(item) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// item found</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr.indexOf(item) === -<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// item not found</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//shorthand</span></span><br><span class="line"><span class="keyword">if</span> (~arr.indexOf(item)) &#123;</span><br><span class="line">  <span class="comment">// item found</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!~arr.indexOf(item)) &#123;</span><br><span class="line">  <span class="comment">// item not found</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="简短函数调用"><a href="#简短函数调用" class="headerlink" title="简短函数调用"></a>简短函数调用</h2><p>有时候会根据一个函数的返回值判断执行某个函数（比如每次提交表单的时候，会根据<code>validateData</code>函数判断是否通过）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Longhand</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> test3 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (test3 == <span class="number">1</span>) &#123;</span><br><span class="line">  test1();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  test2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Shorthand</span></span><br><span class="line">(test3 === <span class="number">1</span> ? test1 : test2)();</span><br></pre></td></tr></table></figure>

<h2 id="双按位操作取整数"><a href="#双按位操作取整数" class="headerlink" title="双按位操作取整数"></a>双按位操作取整数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Longhand</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">1.9</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// Shorthand</span></span><br><span class="line">~~<span class="number">1.9</span>; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>css实现的3D效果</title>
    <url>/2022/04/25/Css3d/</url>
    <content><![CDATA[<p>一个使用<code>transform-style: preserve-3d;</code>的动画效果，来自叶总的分享，挺有意思，这里记录一下</p>
<span id="more"></span>

<p>html代码如下，全部没有用到js，只用css就能实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img-box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/0.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/1.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>索隆<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">40px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.25</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">perspective</span>(<span class="number">1000px</span>);</span><br><span class="line">  <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-class">.img-box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: right;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.img-box</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-class">.img-box</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">  <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">  <span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-class">.img-box</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-class">.detail</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-class">.detail</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">41</span>, <span class="number">250</span>, <span class="number">180</span>);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-class">.detail</span> <span class="selector-tag">span</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">41</span>, <span class="number">250</span>, <span class="number">180</span>, <span class="number">0.2</span>),</span><br><span class="line">    <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">41</span>, <span class="number">250</span>, <span class="number">180</span>, <span class="number">0.2</span>), <span class="number">3px</span> <span class="number">3px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">41</span>, <span class="number">250</span>, <span class="number">180</span>, <span class="number">0.2</span>),</span><br><span class="line">    <span class="number">4px</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">#ccc</span>, <span class="number">5px</span> <span class="number">5px</span> <span class="number">0</span> <span class="number">#ccc</span>, <span class="number">6px</span> <span class="number">6px</span> <span class="number">0</span> <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>一些React使用的例子</title>
    <url>/2022/03/25/ReactDemos/</url>
    <content><![CDATA[<p>React一些功能的使用方式</p>
<span id="more"></span>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p>ref有三种使用方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.objRef = React.createRef() <span class="comment">// create ref使用</span></span><br><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(`span1: $&#123;this.refs.ref1.textContent&#125;`)</span></span><br><span class="line">    <span class="comment">// console.log(`span2: $&#123;this.ref2.textContent&#125;`)</span></span><br><span class="line">    <span class="comment">// console.log(`span3: $&#123;this.ref3.current.textContent&#125;`)</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.refs.stringRef.textContent = <span class="string">&#x27;string ref got&#x27;</span></span><br><span class="line">      <span class="built_in">this</span>.methodRef.textContent = <span class="string">&#x27;method ref got&#x27;</span></span><br><span class="line">      <span class="built_in">this</span>.objRef.current.textContent = <span class="string">&#x27;obj ref got&#x27;</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;stringRef&quot;</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">p</span>&gt;</span> // sting ref使用</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&#123;ele</span> =&gt;</span> (this.methodRef = ele)&#125;&gt;span3<span class="tag">&lt;/<span class="name">p</span>&gt;</span>// function ref使用</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&#123;this.objRef&#125;</span>&gt;</span>span3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="forward-ref"><a href="#forward-ref" class="headerlink" title="forward ref"></a>forward ref</h2><p>当ref的是一个函数组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TargetComponent = React.forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span></span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Comp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>()</span><br><span class="line">    <span class="built_in">this</span>.ref = React.createRef()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.ref.current.value = <span class="string">&#x27;ref get input&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">TargetComponent</span> <span class="attr">ref</span>=<span class="string">&#123;this.ref&#125;</span> /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>React源码中的片段</title>
    <url>/2022/03/24/ReactCodeSlice/</url>
    <content><![CDATA[<p>一些读 react 源码的时候发现的一些实用的代码片段</p>
<span id="more"></span>


<p>读取函数中除了前两个参数的剩余参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, config, children</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> childrenLength = <span class="built_in">arguments</span>.length - <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (childrenLength === <span class="number">1</span>) &#123;</span><br><span class="line">    props.children = children;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childrenLength &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> childArray = <span class="built_in">Array</span>(childrenLength);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; childrenLength; i++) &#123;</span><br><span class="line">      childArray[i] = <span class="built_in">arguments</span>[i + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    props.children = childArray;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>BUg集合</title>
    <url>/2021/12/30/bugCollection/</url>
    <content><![CDATA[<p>这里用来记载一些平时开发会遇到的坑，持续更新</p>
<span id="more"></span>

<h1 id="zorro-antd-的虚拟滚动列表乱序问题"><a href="#zorro-antd-的虚拟滚动列表乱序问题" class="headerlink" title="zorro antd 的虚拟滚动列表乱序问题"></a>zorro antd 的虚拟滚动列表乱序问题</h1><p>使用了 nzVirtualScroll 虚拟滚动，发现切换数据展示时数据会乱序<br>只要在每次赋值之前将列表清空即可</p>
<h1 id="pre-标签自动换行问题"><a href="#pre-标签自动换行问题" class="headerlink" title="pre 标签自动换行问题"></a>pre 标签自动换行问题</h1><p>pre 标签默认文字过长不会换行</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">white-space</span>: pre-wrap; <span class="comment">/* css3.0 */</span></span><br><span class="line"><span class="attribute">white-space</span>: -moz-pre-wrap; <span class="comment">/* Firefox */</span></span><br><span class="line"><span class="attribute">white-space</span>: -pre-wrap; <span class="comment">/* Opera 4-6 */</span></span><br><span class="line"><span class="attribute">white-space</span>: -o-pre-wrap; <span class="comment">/* Opera 7 */</span></span><br><span class="line"><span class="attribute">word-wrap</span>: break-word; <span class="comment">/* Internet Explorer 5.5+ */</span></span><br></pre></td></tr></table></figure>

<p>加上以上代码即可</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者与发布订阅</title>
    <url>/2021/12/09/Observe/</url>
    <content><![CDATA[<p>用每个互联网工作者都能看懂的栗子说明发布订阅与观察者区别</p>
<span id="more"></span>

<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><!-- more -->
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observe</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> __message = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">on</span>(<span class="params">type, fn</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span>.__message[type] === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.__message[type] = [fn];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.__message[type].push(fn);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">subscribe</span>(<span class="params">type, args</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.__message[type]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.__message[type].length; i++) &#123;</span><br><span class="line">      <span class="built_in">this</span>.__message[type][i].call(<span class="built_in">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">off</span>(<span class="params">type, fn</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.__message[type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> i = <span class="built_in">this</span>.__message[type].length - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">this</span>.__message[type][i] === fn &amp;&amp; <span class="built_in">this</span>.__message[type].splice(i, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Observe.on(<span class="string">&quot;say&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line">Observe.subscribe(<span class="string">&quot;say&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">Observe.subscribe(<span class="string">&quot;say&quot;</span>, <span class="string">&quot;321&quot;</span>);</span><br><span class="line"></span><br><span class="line">Observe.on(<span class="string">&quot;hello&quot;</span>, hello);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;</span><br><span class="line">Observe.subscribe(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">Observe.subscribe(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">Observe.off(<span class="string">&quot;hello&quot;</span>, hello);</span><br><span class="line">Observe.subscribe(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h1><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调度中心</span></span><br><span class="line"><span class="keyword">let</span> eventEmitter = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存列表，存放 event 及 fn</span></span><br><span class="line">eventEmitter.list = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅</span></span><br><span class="line">eventEmitter.on = <span class="function"><span class="keyword">function</span> (<span class="params">event, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">// 如果对象中没有对应的 event 值，也就是说明没有订阅过，就给 event 创建个缓存列表</span></span><br><span class="line">    <span class="comment">// 如有对象中有相应的 event 值，把 fn 添加到对应 event 的缓存列表里</span></span><br><span class="line">    (_this.list[event] || (_this.list[event] = [])).push(fn);</span><br><span class="line">    <span class="keyword">return</span> _this;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">eventEmitter.emit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">// 第一个参数是对应的 event 值，直接用数组的 shift 方法取出</span></span><br><span class="line">    <span class="keyword">let</span> event = [].shift.call(<span class="built_in">arguments</span>),</span><br><span class="line">        fns = [..._this.list[event]];</span><br><span class="line">    <span class="comment">// 如果缓存列表里没有 fn 就返回 false</span></span><br><span class="line">    <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历 event 值对应的缓存列表，依次执行 fn</span></span><br><span class="line">    fns.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">        fn.apply(_this, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> _this;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="调用-1"><a href="#调用-1" class="headerlink" title="调用"></a>调用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user1</span> (<span class="params">content</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;用户1订阅了:&#x27;</span>, content);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user2</span> (<span class="params">content</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;用户2订阅了:&#x27;</span>, content);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅</span></span><br><span class="line">eventEmitter.on(<span class="string">&#x27;article&#x27;</span>, user1);</span><br><span class="line">eventEmitter.on(<span class="string">&#x27;article&#x27;</span>, user2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">eventEmitter.emit(<span class="string">&#x27;article&#x27;</span>, <span class="string">&#x27;Javascript 发布-订阅模式&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>网上关于两者区别说的已经很多了，结合我自己的思考，举个栗子总结一下。平时开发中与测试打交道是不可避免的，下面就两种场景分析一下</p>
<h2 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h2><p>开发者直接对接测试，测试有发现问题直接通知给开发者。</p>
<ul>
<li>优点：测试发现一个bug就通知一遍开发，响应及时</li>
<li>缺点：开发与测试耦合在一起，如果开发请假，测试就不好通知，因此开发与测试需同时引入</li>
</ul>
<h2 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h2><p>有一套BUG单系统，测试发现问题提BUG单，开发者去系统中订阅派发给自己的BUG单。</p>
<ul>
<li>优点：不管是开发请假还是测试请假，系统都在，双方都可以在BUG单系统上执行自己的操作。</li>
<li>缺点：同时要维护一套BUG单系统，增加了成本</li>
</ul>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>SourceMap</title>
    <url>/2021/12/06/SourceMap/</url>
    <content><![CDATA[<p><strong><code>source map</code>是为了解决即使打包过后的代码，也可以找到具体的报错位置，使我们的<code>debug</code>代码变得更轻松</strong></p>
<span id="more"></span>

<h1 id="Webpack中的配置"><a href="#Webpack中的配置" class="headerlink" title="Webpack中的配置"></a>Webpack中的配置</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;   </span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,  </span><br><span class="line">    <span class="attr">output</span>: &#123;      </span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,      </span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>)  </span><br><span class="line">    &#125;,  </span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其中devtool有20多种不同取值，分别生成不同类型<code>Source Map</code>,主要有以下几种</p>
<ul>
<li><code>source-map</code>：外部。可以查看错误代码准确信息和源代码的错误位置。</li>
<li><code>inline-source-map</code>：内联。只生成一个内联 <code>Source Map</code>，可以查看错误代码准确信息和源代码的错误位置</li>
<li><code>hidden-source-map</code>：外部。可以查看错误代码准确信息，但不能追踪源代码错误，只能提示到构建后代码的错误位置。</li>
<li><code>eval-source-map</code>：内联。每一个文件都生成对应的 <code>Source Map</code>，都在 <code>eval</code> 中，可以查看错误代码准确信息 和 源代码的错误位置。</li>
<li><code>nosources-source-map</code>：外部。可以查看错误代码错误原因，但不能查看错误代码准确信息，并且没有任何源代码信息。</li>
<li><code>cheap-source-map</code>：外部。可以查看错误代码准确信息和源代码的错误位置，只能把错误精确到整行，忽略列。</li>
<li><code>cheap-module-source-map</code>：外部。可以错误代码准确信息和源代码的错误位置，<code>module</code> 会加入 <code>loader</code> 的 <code>Source Map</code>。</li>
</ul>
<p>内联和外部的区别：</p>
<ol>
<li>外部生成了文件（.map），内联没有。</li>
<li>内联构建速度更快。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>测试环境用<code>source-map</code> &#x3D;&gt; <code>cheap-module-souce-map</code><br>正式环境用<code>nosources-source-map</code>&#x3D;&gt;<code>hidden-source-map</code></p>
<h1 id="map文件解构"><a href="#map文件解构" class="headerlink" title=".map文件解构"></a>.map文件解构</h1><p>下面是一个<code>bundle.js</code>文件生成的<code>.map</code>文件</p>
<p>原始文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<p>打包后的文件 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/******/</span></span><br><span class="line">(<span class="function">() =&gt;</span> &#123; <span class="comment">// webpackBootstrap   </span></span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;  </span><br><span class="line">    <span class="comment">/*!**********************!*\    </span></span><br><span class="line"><span class="comment">      !*** ./src/index.js ***!     </span></span><br><span class="line"><span class="comment">      \**********************/</span>   </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;   </span><br><span class="line">    <span class="built_in">console</span>.log(a);   </span><br><span class="line">    <span class="comment">/******/</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">//# sourceMappingURL=bundle.js.map</span></span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="number">3</span>,  <span class="comment">// sourceMap版本</span></span><br><span class="line">    <span class="string">&quot;sources&quot;</span>: [  <span class="comment">// 转换前的文件   </span></span><br><span class="line">        <span class="string">&quot;webpack://learn-source-map/./src/index.js&quot;</span>   </span><br><span class="line">    ],  </span><br><span class="line">    <span class="string">&quot;names&quot;</span>: [],  <span class="comment">// 转换钱所有变量名  </span></span><br><span class="line">    <span class="string">&quot;mappings&quot;</span>: <span class="string">&quot;AAAA;AACA,c&quot;</span>,   <span class="comment">// 记录位置信息的字符串</span></span><br><span class="line">    <span class="string">&quot;file&quot;</span>: <span class="string">&quot;bundle.js&quot;</span>,  <span class="comment">// 转换后的文件名</span></span><br><span class="line">    <span class="string">&quot;sourcesContent&quot;</span>: [ <span class="comment">// 转换前文件原始内容    </span></span><br><span class="line">        <span class="string">&quot;var a = 1;\r\nconsole.log(a);&quot;</span>  </span><br><span class="line">    ],   </span><br><span class="line">    <span class="string">&quot;sourceRoot&quot;</span>: <span class="string">&quot;&quot;</span> <span class="comment">// 转换钱文件的所在目录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>mappings</code>要单独拿出来理解一下</p>
<ul>
<li><code>；</code>表示不同行，每个分号都表示转换后源码的一行 （以此为例就是分了两行）</li>
<li><code>，</code>表示对应转换后源码的一个位置(以此为例就是AAACA,c表示<code>console</code>和<code>log(a)</code>)</li>
<li>每个字母表示不同的位置转换(每个字母表示不同意思，最多由5个字母组成）<ol>
<li>第一位，表示这个位置在（转换后的代码的）的第几列。</li>
<li>第二位，表示这个位置属于 sources 属性中的哪一个文件。</li>
<li>第三位，表示这个位置属于转换前代码的第几行。</li>
<li>第四位，表示这个位置属于转换前代码的第几列。</li>
<li>第五位，表示这个位置属于 names 属性中的哪一个变量。</li>
</ol>
</li>
</ul>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>日本旅行计划</title>
    <url>/2019/05/29/Japen2019/</url>
    <content><![CDATA[<h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><h2 id="大阪"><a href="#大阪" class="headerlink" title="大阪"></a>大阪</h2><h3 id="游玩"><a href="#游玩" class="headerlink" title="游玩"></a>游玩</h3><ul>
<li>心斋桥</li>
</ul>
<h3 id="购物"><a href="#购物" class="headerlink" title="购物"></a>购物</h3><span id="more"></span>
<h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><h2 id="大阪-1"><a href="#大阪-1" class="headerlink" title="大阪"></a>大阪</h2><ul>
<li>环球影城</li>
</ul>
<h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><h2 id="大阪-2"><a href="#大阪-2" class="headerlink" title="大阪"></a>大阪</h2><ul>
<li>心斋桥</li>
<li>道顿堀</li>
</ul>
<img src="/images/japanevisu.jpg" width="200" style="margin:0"/>

<h3 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h3><ul>
<li>道顿堀螃蟹三吃</li>
</ul>
<h1 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h1><h2 id="大阪-京都"><a href="#大阪-京都" class="headerlink" title="大阪-京都"></a>大阪-京都</h2><h1 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h1><h2 id="京都"><a href="#京都" class="headerlink" title="京都"></a>京都</h2><h1 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h1><h2 id="京都-奈良-大阪"><a href="#京都-奈良-大阪" class="headerlink" title="京都-奈良-大阪"></a>京都-奈良-大阪</h2><h3 id="游玩-1"><a href="#游玩-1" class="headerlink" title="游玩"></a>游玩</h3><ul>
<li>奈良公園</li>
<li>春日大社</li>
<li>東大寺 -&gt;二月堂-&gt;三月堂 到若草山</li>
</ul>
<h3 id="美食-1"><a href="#美食-1" class="headerlink" title="美食"></a>美食</h3><ul>
<li>志津香釜飯(靠近奈良国立博物馆)</li>
</ul>
<h1 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h1><h2 id="大阪-3"><a href="#大阪-3" class="headerlink" title="大阪"></a>大阪</h2>]]></content>
      <tags>
        <tag>Travel</tag>
      </tags>
  </entry>
  <entry>
    <title>事件循环</title>
    <url>/2019/02/21/EventLoop/</url>
    <content><![CDATA[<h2 id="javescript的事件循环"><a href="#javescript的事件循环" class="headerlink" title="javescript的事件循环"></a>javescript的事件循环</h2><p>要说javescript的事件循环，就要从js的单线程说起</p>
<span id="more"></span>

<hr>
<h3 id="为什么js是单线程？"><a href="#为什么js是单线程？" class="headerlink" title="为什么js是单线程？"></a>为什么js是单线程？</h3><p>js的单线程与他用途有关。js的主要用途是与用户交互，以及操作DOM，这决定了它只能是单线程。</p>
<hr>
<h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h3><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。</p>
<p>所以主线程完全可以不管IO设备可以挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。</p>
<p>于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。</p>
<p>异步执行机制（同步执行也是如此）：</p>
<ul>
<li>所有同步任务都在主线程上执行，形成一个执行栈。</li>
<li>主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。</li>
<li>一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</li>
<li>主线程不断重复上面的第三步。</li>
</ul>
<p>关于任务队列再补充几点</p>
<ul>
<li><strong>任务队列</strong>中的事件只要指定过<strong>回调函数</strong>，这些事件发生时就会进入<strong>任务队列</strong>，队列又细分为宏队列和微队列，其中包含的任务被称为宏任务和微任务。<strong>回调函数</strong>就是会被主线程挂起来的代码。</li>
<li><strong>任务队列</strong>是一个先进先出的数据结构</li>
<li>主线程读取任务队列基本上是自动的，只要执行栈清空，<strong>任务队列</strong>上第一个事件就自动进入主线程</li>
</ul>
<hr>
<h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><p><em>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。</em></p>
<p>这边有一个很重要的点就是:<br><strong>执行栈中的代码总是在读取任务队列之前执行</strong></p>
<p><img src="/../img/bg2014100802.png" alt="bg2014100802"></p>
<p>主线程运行的时候，产生堆（heap）和栈（stack），栈中的代码调用各种外部API，它们在”任务队列”中加入各种事件（click，load，done）。只要栈中的代码执行完毕，主线程就会去读取”任务队列”，依次执行那些事件所对应的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">req.open(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line">req.send();</span><br><span class="line">req.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;    </span><br><span class="line">req.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;   </span><br></pre></td></tr></table></figure>

<p><code>req.onload</code>和<code>req.onerror</code>在<code>send()</code>的前后无关紧要，因为他们是执行栈的一部分，只有执行完他们，才会去读取<code>send()</code>加入任务队列中的回调函数</p>
<h4 id="Node-js的事件循环"><a href="#Node-js的事件循环" class="headerlink" title="Node.js的事件循环"></a>Node.js的事件循环</h4><p><img src="/../img/bg2014100803.png" alt="bg2014100803"></p>
<p>Node.js的运行机制如下</p>
<ol>
<li>V8引擎解析js</li>
<li>解析代码后，调用Node的API</li>
<li>libuv库负责Node API的执行。它将不同任务分配给不同队列形成事件循环，以异步方式将任务执行结果返回给V8引擎</li>
<li>V8引擎再将结果返回给用户</li>
</ol>
<p>Node.js的事件循环与浏览器不一样，它每一轮事件循环分6个部分，依次执行。每个阶段都有一个先进先出的回调函数队列。只有一个阶段的回调函数队列清空了，该执行的回调函数都执行了，事件循环才会进入下一个阶段。<br><img src="/../img/bg2018022304.png" alt="bg2018022304"></p>
<ul>
<li>timmer:这个是定时器阶段，处理setTimeout()和setInterval()的回调函数。进入这个阶段后，主线程会检查一下当前时间，是否满足定时器的条件。如果满足就执行回调函数，否则就离开这个阶段。</li>
<li>I&#x2F;O callbacks: 这个阶段执行一些系统操作的回调。比如TCP错误，如一个TCP socket在想要连接时收到ECONNREFUSED, 类unix系统会等待以报告错误，这就会放到 I&#x2F;O callbacks 阶段的队列执行。</li>
<li>idle,prepare:该阶段只供 libuv 内部调用，这里可以忽略。</li>
<li>Poll:这个阶段是轮询时间，用于等待还未返回的 I&#x2F;O 事件，比如服务器的回应、用户移动鼠标等等。这个阶段的时间会比较长。如果没有其他异步任务要处理（比如到期的定时器），会一直停留在这个阶段，等待 I&#x2F;O 请求返回结果。</li>
<li>check: <code>setImmediate</code>在这个阶段执行</li>
<li>close callbacks：该阶段关闭请求的回调函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someAsyncOperation</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 假设这个任务要消耗 95ms</span></span><br><span class="line">  fs.readFile(<span class="string">&#x27;/path/to/file&#x27;</span>, callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timeoutScheduled = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> delay = <span class="built_in">Date</span>.now() - timeoutScheduled;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(delay + <span class="string">&quot;ms have passed since I was scheduled&quot;</span>);</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// someAsyncOperation要消耗 95 ms 才能完成</span></span><br><span class="line">someAsyncOperation(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> startCallback = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 消耗 10ms...</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">Date</span>.now() - startCallback &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    ; <span class="comment">// do nothing</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol>
<li>在timmer阶段<code>setTimeout</code>还没有到设置的时间，不会执行回调</li>
<li>进入Poll阶段，读取文件用时95ms，然后执行回调，在回调执行到一半，100ms的定时器到期，但是必须等这个回调执行完毕才会离开这个阶段</li>
<li>执行<code>setTimeout</code>回调，打印出105ms</li>
</ol>
<h3 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h3><p>先通过一张图片来了解宏任务与微任务的关系</p>
<p><img src="/../img/165a8667bb6e623e" alt="165a8667bb6e623e"></p>
<ol>
<li>执行全局同步代码</li>
<li>全局代码执行完毕后，调用栈会清空</li>
<li>从微任务中取出队首的回调任务，放入调用栈执行</li>
<li>继续取出微任务队首任务放入执行栈执行，以此类推，直到微任务队列全部执行完毕。如果再执行微任务过程中，又产生微任务，会加到这个周期的微任务末尾，也在这个周期执行</li>
<li>微任务全部执行完毕，此时微任务队列为空，调用栈也为空，去除宏队列中队首的任务，放入执行栈执行</li>
<li>执行完毕后，调用栈为空</li>
<li>重复3-7步骤</li>
</ol>
<h4 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h4><p>宏任务最常见的例子就是定时器：<code>setTimeout()</code>和<code>setInterval()</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">执行结果：<span class="comment">// 1 3 2</span></span><br></pre></td></tr></table></figure>

<p>上面的例子中，<code>setTimeout</code>注册了一个宏任务，等执行栈全部执行完后，再从宏任务中取出并执行。</p>
<h4 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h4><p><strong>微任务总是在宏任务之后执行，微任务没有执行完成，不会执行下一个宏任务</strong><br>微任务的代表就是<code>Promise</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  resolve()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line"> 执行结果 <span class="comment">// 1 2 3 4</span></span><br></pre></td></tr></table></figure>
<p><code>Promise</code>在实例化过程中是同步进行的，二<code>then</code>中注册的回调函数加入微任务中，在执行栈执行完当前同步代码再去查看是否有微任务，执行完微任务才执行宏任务，以此循环</p>
<p>因此可以预见在<code>Promise</code>中实例化<code>Promise</code>，其输出依然会早于<code>setTimeout</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  resolve()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve(</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  ).then(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;before timeout&#x27;</span>)</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Promise</span>.resolve(</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">    ).then(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;also before timeout&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>以上输出顺序就是按照数字顺序</p>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>下面举几个特殊例子<br><code>requestAnimationFrame</code>在MDN上的定义是:<em>告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画</em><br>看下面例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> timer = requestAnimationFrame(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    resolve();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line">输出顺序 <span class="comment">//3 4 2 1</span></span><br></pre></td></tr></table></figure>
<p>由上代码输出结果可以看出<strong>requestAnimationFrame</strong>实际在微任务后执行，但是又在宏任务之前，从MDN定义来看，重绘是作为宏任务的一个步骤存在的，暂且列为宏任务</p>
<p><code>requestAnimationFrame</code>可以解决定时器写的动画对网页性能的影响，因为它是在每一次重新渲染页面的时候执行，所以不会像定时器可能会在同一次渲染中多次执行修改页面的代码，也不会因为间隔时间过长引起动画不流畅</p>
<ul>
<li><p><strong>requestIdleCallback</strong>在MDN上的定义:<em>会在浏览器空闲时依次调用函数</em><br>看如下例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> timer = requestIdleCallback(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      resolve();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    输出顺序 <span class="comment">//3 4 1 2</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>其实<code>requestIdleCallback</code>无论放在哪都是最后输出<br>这里我们看一下关于<code>requestIdleCallback</code>的深度解释：<strong>只有当一帧的末尾有空闲时间，才会执行回调函数</strong>，我们都知道网页一秒运行60帧，也就说一帧运行时间小于16.7ms才会运行<code>requestIdleCallback</code>的回调函数,我们对上面代码做如下改动</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = requestIdleCallback(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;,&#123;<span class="attr">timeout</span>:<span class="number">100</span>&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  resolve();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line">输出顺序 <span class="comment">// 3 4 2 1</span></span><br></pre></td></tr></table></figure>
<p>配置timeout是如果在规定的时间内没有可以运行的帧，到了规定时间就强制执行<code>requestIdleCallback</code>中的回调，不过在实际运行中就已经造成页面的卡顿了</p>
<p>如上代码是在我浏览器上运行，这个代码执行顺序直接跟浏览器性能有关，如果Promise的运行时间小于我设施的setTimeout的时间，<code>requestIdleCallback</code>就会先于setTimeout执行。废话说了这么多，其实就是为了证明requestIdleCallback是在微任务之后执行的宏任务</p>
<p><code>requestIdleCallback</code>适合在页面滚动时使用，这样执行的代码不会引起页面滚动的卡顿</p>
<ul>
<li><strong>MutationObserver</strong>在MDN的定义为:<em>提供了监视对DOM树所做更改的能力</em></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $inner = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#inner&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> $outer = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#outer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;click&#x27;</span>) <span class="comment">// 直接输出</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;promise&#x27;</span>)) <span class="comment">// 注册微任务</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;timeout&#x27;</span>)) <span class="comment">// 注册宏任务</span></span><br><span class="line"></span><br><span class="line">  requestAnimationFrame(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;animationFrame&#x27;</span>)) <span class="comment">// 注册宏任务</span></span><br><span class="line"></span><br><span class="line">  $outer.setAttribute(<span class="string">&#x27;data-random&#x27;</span>, <span class="built_in">Math</span>.random()) <span class="comment">// DOM属性修改，触发微任务</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MutationObserver(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;observer&#x27;</span>)</span><br><span class="line">&#125;).observe($outer, &#123;</span><br><span class="line">  <span class="attr">attributes</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$inner.addEventListener(<span class="string">&#x27;click&#x27;</span>, handler)</span><br><span class="line">$outer.addEventListener(<span class="string">&#x27;click&#x27;</span>, handler)</span><br><span class="line">输出结果 <span class="comment">//</span></span><br><span class="line"> click</span><br><span class="line"> promise</span><br><span class="line"> observer</span><br><span class="line"> click</span><br><span class="line"> promise</span><br><span class="line"> observer</span><br><span class="line"> <span class="number">2</span>* animationFrame</span><br><span class="line"> <span class="number">2</span>* timeout</span><br></pre></td></tr></table></figure>

<p>以上是一段包含<code>MutationObserver</code>的代码，从运行结果可以看出执行顺序如下:</p>
<ol>
<li>点击的I&#x2F;O事件会将inner和outer的回调注册为宏任务，先触发inner的handler，打印click</li>
<li>发现其中有promise优先注册为微任务，setTimeout和requestAnimationFrame注册为宏任务，setAttribute修改了attributes触发MutationObserver注册为微任务</li>
<li>执行微任务promise和observer后发现没有微任务了</li>
<li>执行outer注册的宏任务，重复第二部流程</li>
<li>因为第二步修改了DOM的attributes，导致页面重绘，所以requestAnimationFrame的回调先执行，然后执行setTimeouter</li>
<li>执行outer中的宏任务，重复第五步流程</li>
</ol>
<ul>
<li><strong>setImmediate</strong>在MDN中解释为：<em>该方法用来把一些需要长时间运行的操作放在一个回调函数里,在浏览器完成后面的其他语句后,就立刻执行这个回调函数</em></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line">setImmediate(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<p>上面代码输出顺序是不确定的，因为在实际执行的时候，进入事件循环以后，有可能到了1毫秒，也可能还没到1毫秒，取决于系统当时的状况。如果没到1毫秒，那么 timers 阶段就会跳过，进入 check 阶段，先执行setImmediate的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&#x27;test.js&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line">  setImmediate(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>但是这样改进后，2一定在1之前打印，因为先进入I&#x2F;O callback阶段，然后是check阶段，在第二轮循环才轮到timmer阶段</p>
<ul>
<li><strong>process.nextTick</strong>是定义一个动作，在下一轮事件轮询时执行，微任务追加在其后面。<br><code>process.nextTick</code>执行比较特殊，无论事件循环在何种阶段，都会在结束时执行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line">setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  process.nextTick(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="number">6</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;);</span><br><span class="line">process.nextTick(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="number">3</span>));</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="number">4</span>));</span><br><span class="line">(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="number">5</span>))();</span><br><span class="line"><span class="comment">// 打印 5 3 4 1 2 6</span></span><br></pre></td></tr></table></figure>




<ul>
<li><p><strong>总结</strong></p>
<p>  <strong>宏任务:I&#x2F;O，定时器，setImmediate，requestAnimationFrame</strong><br>  <strong>微任务：MutationObserver，Promise.then，process.nextTick</strong></p>
</li>
</ul>
<h4 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h4><p><strong>异步函数</strong>是一个使用隐式 Promise 异步操作以返回其结果的函数。异步函数旨在使异步代码看起来像同步代码，为开发者隐藏异步处理的一些复杂性。</p>
<p>通常传递<code>Promise</code>给<code>await</code>，但是实际上可以传任意值给<code>await</code>，因为<code>await</code>会将任意值转成<code>Promise</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> v = <span class="keyword">await</span> <span class="number">42</span>;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = foo();</span><br><span class="line"><span class="comment">// → Promise</span></span><br><span class="line"></span><br><span class="line">p.then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// prints `42` eventually</span></span><br></pre></td></tr></table></figure>

<p><code>await</code>可以使用任何<code>thenable</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sleep</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">timeout</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.timeout = timeout;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">resolve, reject</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(<span class="built_in">Date</span>.now() - startTime),</span><br><span class="line">               <span class="built_in">this</span>.timeout);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> actualTime = <span class="keyword">await</span> <span class="keyword">new</span> Sleep(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(actualTime);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>现在有趣的来了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve();</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> p; <span class="built_in">console</span>.log(<span class="string">&#x27;after:await&#x27;</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">p.then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;tick:a&#x27;</span>))</span><br><span class="line"> .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;tick:b&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>上面代码的输出顺序其实是错误的，<code>then</code>关联到一个已经<code>fulfilled</code>的<code>Promise</code>上，V8引擎的一个BUG导致上面的代码<code>await</code>跳过了微任务，先打印出了<code>after:await</code>。</p>
<p>官方给的解释是<em>这个 bug 的原因是我们违反了 es 的规范，但它后来给了我们关于优化的灵感。</em></p>
<p><img src="/../img/v8.svg" alt="v8"></p>
<p>可以看到其实在await的实现中，不论传参是什么，都会再包一层promise，因此事件被加入了下一次的task中，所以导致了输出顺序问题。<br>分析一下<code>await</code>具体做了什么操作：</p>
<ol>
<li>将 v 转换为 Promise- v 代表传递给 await 的值。</li>
<li>给 Promise 附加处理程序以便稍后恢复异步函数。</li>
<li>挂起异步函数并返回 implicit_promise 给调用者。<br>从性能角度分析，第一步多创建了<code>Promise</code>包装器，然后立即解析<code>Promise</code>包装器v的值，这两行多创建了一个<code>Promise</code>，同时创建<code>Promise</code>会导致一个额外的<code>PromiseReactionJob</code>，<code>resolvePromise</code>会导致一个额外的<code>PromiseResolveThenableJob</code></li>
</ol>
<p><img src="/../img/await-code-comparison.svg" alt="await-code-comparison"></p>
<p>而改进过后，会在包装Promise的时候先判断传入的是不是一个Promise对象，如果是直接沿用这个Promise，从而减少了创建的promise数量和微任务的数量。<code>throwaway</code>是为了恢复foo的执行，因此优化之后的<code>await</code>就只创建这一个新的<code>Promise</code></p>
<p>内容参考:</p>
<ul>
<li>MDN WEB 文档</li>
<li>&lt;&lt;ES6标准指南&gt;&gt;(阮一峰)</li>
<li><a href="http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html">阮一峰博客：网页性能详解</a></li>
<li>segmentfault中的全沾开发(huā) <a href="https://segmentfault.com/a/1190000016022069#articleHeader11">https://segmentfault.com/a/1190000016022069#articleHeader11</a></li>
<li><a href="https://v8.js.cn/blog/fast-async/">v8引擎中文官网(更快的异步函数和 Promise)</a></li>
</ul>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>图片裁剪</title>
    <url>/2018/02/02/TailorPic/</url>
    <content><![CDATA[<p> 图片裁剪上传功能通用的方法(基于原生 JS，不需要引入任何框架)</p>
<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> imgFrom = <span class="built_in">document</span>.getElementById(<span class="string">&quot;inputArea&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadimg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  imgFrom.click();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myFrom = <span class="keyword">new</span> FormData();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> imageData = imgFrom.files[<span class="number">0</span>]; <span class="comment">//获取表单中第一个文件</span></span><br><span class="line"></span><br><span class="line">  myFrom.append(<span class="string">&quot;image&quot;</span>, imageData); <span class="comment">//向表单中添加一个键值对</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader(); <span class="comment">//调用FileReader对象</span></span><br><span class="line"></span><br><span class="line">  reader.readAsDataURL(imageData); <span class="comment">//通过DataURL的方式返回图像</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> theCanvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;imgCanvas&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> canvasImg = theCanvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line">  reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    img.src = e.target.result;</span><br><span class="line">  &#125;;</span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    theCanvas.width = img.width; <span class="comment">//将img对象的长款赋给canvas标签</span></span><br><span class="line"></span><br><span class="line">    theCanvas.height = img.height;</span><br><span class="line"></span><br><span class="line">    canvasImg.drawImage(img, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> resultCanvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;resultCanvas&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> resultImg = resultCanvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> W = theCanvas.width; <span class="comment">//上传图片的宽度</span></span><br><span class="line">    <span class="keyword">var</span> H = theCanvas.height; <span class="comment">//上传图片的高度</span></span><br><span class="line">    <span class="keyword">var</span> cutData; <span class="comment">//裁剪过的DATA</span></span><br><span class="line">    <span class="keyword">var</span> startX = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> startY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    theCanvas.addEventListener(<span class="string">&quot;mousedown&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      flag = <span class="literal">true</span>; <span class="comment">//改变标记状态，置为点击状态</span></span><br><span class="line">      startX = e.clientX; <span class="comment">//获得起始点横坐标</span></span><br><span class="line">      startY = e.clientY; <span class="comment">//获得起始点纵坐标</span></span><br><span class="line">      cutData = canvasImg.getImageData(<span class="number">0</span>, <span class="number">0</span>, W, H);</span><br><span class="line">      <span class="keyword">if</span> (!!cutData) &#123;</span><br><span class="line">        resultImg.clearRect(<span class="number">0</span>, <span class="number">0</span>, cutData.width, cutData.height); <span class="comment">//清空预览区域</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    theCanvas.addEventListener(<span class="string">&quot;mousemove&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        canvasImg.clearRect(<span class="number">0</span>, <span class="number">0</span>, W, H);</span><br><span class="line">        canvasImg.drawImage(img, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//重新绘制图片</span></span><br><span class="line">        canvasImg.fillStyle = <span class="string">&quot;rgba(255,255,255,0.6)&quot;</span>;</span><br><span class="line">        canvasImg.fillRect(<span class="number">0</span>, <span class="number">0</span>, e.clientX, startY); <span class="comment">//矩形A</span></span><br><span class="line">        canvasImg.fillRect(e.clientX, <span class="number">0</span>, W, e.clientY); <span class="comment">//矩形B</span></span><br><span class="line">        canvasImg.fillRect(startX, e.clientY, W - startX, H - e.clientY); <span class="comment">//矩形C</span></span><br><span class="line">        canvasImg.fillRect(<span class="number">0</span>, startY, startX, H - startY); <span class="comment">//矩形D</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    theCanvas.addEventListener(<span class="string">&quot;mouseup&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      cutData = canvasImg.getImageData(</span><br><span class="line">        startX,</span><br><span class="line">        startY,</span><br><span class="line">        e.clientX - startX,</span><br><span class="line">        e.clientY - startY</span><br><span class="line">      ); <span class="comment">//截取黑框区域图片信息</span></span><br><span class="line">      resultImg.putImageData(cutData, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//将图片信息赋给预览区域</span></span><br><span class="line">      resultCanvas.toBlob(<span class="function"><span class="keyword">function</span> (<span class="params">blob</span>) </span>&#123;</span><br><span class="line">        resultFile = blob; <span class="comment">//上传的blob</span></span><br><span class="line">      &#125;);</span><br><span class="line">      flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
</search>
